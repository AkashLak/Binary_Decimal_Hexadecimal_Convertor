/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author akash
 */

import java.awt.Color;
import java.util.*;

public class frmBinandHexConv extends javax.swing.JFrame {

    /**
     * Creates new form frmBinandHexConv
     */
    // Define constant variables for values of 2 and 16, to be used for Binary and Hexadecimal conversion
    final int POWERVALUE_2 = 2;
    final int POWERVALUE_16 = 16;
    
    // String variables declared to store the input values for the Text input for all conversions
    String UI_DectoBin;
    String UI_BintoDec;
    String UI_DectoHex;
    String UI_HextoDec;
    
    // String variables declared to store the output values for DectoBin and DectoHex conversions
    String output_DectoBin = "";
    String output_DectoHex = "";
    
    // double variables declared to store the output values for BintoDec and HextoDec conversions
    double output_BintoDec=0;
    double output_HextoDec = 0;
    
    // boolean variable declared to validate the Text input for all conversions
    boolean Validate_Decimal_Flag = true;
    boolean Validate_Binary_Flag = true;
    boolean Validate_DectoHex_Flag = true;
    boolean Validate_HextoDec_Flag = true;
    
    public frmBinandHexConv() {
        initComponents();
        
        // Calling ProgInit procedure, to initialize input text fields, Error Message label and Final message labels
        ProgInit();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblDecState = new javax.swing.JLabel();
        txtDectoBin = new javax.swing.JTextField();
        btnDecToBin = new javax.swing.JButton();
        lblDecToBinAns = new javax.swing.JLabel();
        lblBinState = new javax.swing.JLabel();
        txtBintoDec = new javax.swing.JTextField();
        btnBinToDec = new javax.swing.JButton();
        lblBinToDecAns = new javax.swing.JLabel();
        btnHexToDec = new javax.swing.JButton();
        lblDecToHexAns = new javax.swing.JLabel();
        lblErrorMsg1 = new javax.swing.JLabel();
        lblDecAndBin = new javax.swing.JLabel();
        lblDecAndHexa = new javax.swing.JLabel();
        lblAnswertext1 = new javax.swing.JLabel();
        lblAnswertext2 = new javax.swing.JLabel();
        btnClearAll = new javax.swing.JButton();
        lblDecState2 = new javax.swing.JLabel();
        txtDectoHex = new javax.swing.JTextField();
        btnDecToHex = new javax.swing.JButton();
        lblAnswertext3 = new javax.swing.JLabel();
        lblErrorMsg2 = new javax.swing.JLabel();
        lblDecState3 = new javax.swing.JLabel();
        txtHextoDec = new javax.swing.JTextField();
        lblAnswertext4 = new javax.swing.JLabel();
        lblHexToDecAns = new javax.swing.JLabel();
        lblInstruction = new javax.swing.JLabel();
        lblInstruction2 = new javax.swing.JLabel();
        lblInstruction3 = new javax.swing.JLabel();
        lblInstruction4 = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(51, 0, 51));
        lblTitle.setText("BINARY, DECIMAL and HEXADECIMAL - CONVERSION");

        lblDecState.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDecState.setForeground(new java.awt.Color(0, 51, 51));
        lblDecState.setText("Enter a Decimal Number :");

        txtDectoBin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDectoBin.setForeground(new java.awt.Color(51, 0, 51));
        txtDectoBin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDectoBinKeyReleased(evt);
            }
        });

        btnDecToBin.setText("Dec to Bin");
        btnDecToBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecToBinActionPerformed(evt);
            }
        });

        lblDecToBinAns.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDecToBinAns.setForeground(new java.awt.Color(51, 102, 0));
        lblDecToBinAns.setText(" ");

        lblBinState.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblBinState.setForeground(new java.awt.Color(0, 51, 51));
        lblBinState.setText("Enter a Binary Number : ");

        txtBintoDec.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtBintoDec.setForeground(new java.awt.Color(51, 0, 51));
        txtBintoDec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBintoDecKeyReleased(evt);
            }
        });

        btnBinToDec.setText("Bin to Dec");
        btnBinToDec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinToDecActionPerformed(evt);
            }
        });

        lblBinToDecAns.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBinToDecAns.setForeground(new java.awt.Color(51, 102, 0));
        lblBinToDecAns.setText(" ");

        btnHexToDec.setText("Hex to Dec");
        btnHexToDec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHexToDecActionPerformed(evt);
            }
        });

        lblDecToHexAns.setText(" ");

        lblErrorMsg1.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrorMsg1.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorMsg1.setText("Error Message");

        lblDecAndBin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDecAndBin.setForeground(new java.awt.Color(0, 0, 255));
        lblDecAndBin.setText("DECIMAL  -  BINARY conversion");
        lblDecAndBin.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lblDecAndHexa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDecAndHexa.setForeground(new java.awt.Color(0, 0, 255));
        lblDecAndHexa.setText("DECIMAL  -  HEXADECIMAL conversion");
        lblDecAndHexa.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lblAnswertext1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAnswertext1.setForeground(new java.awt.Color(255, 0, 0));
        lblAnswertext1.setText("Equivalent Binary Number is :");

        lblAnswertext2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAnswertext2.setForeground(new java.awt.Color(255, 0, 0));
        lblAnswertext2.setText("Equivalent Decimal Number is :");

        btnClearAll.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClearAll.setForeground(new java.awt.Color(51, 0, 51));
        btnClearAll.setText("CLEAR ALL");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        lblDecState2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDecState2.setForeground(new java.awt.Color(0, 51, 51));
        lblDecState2.setText("Enter a Decimal Number :");

        txtDectoHex.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDectoHex.setForeground(new java.awt.Color(51, 0, 51));
        txtDectoHex.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDectoHexKeyReleased(evt);
            }
        });

        btnDecToHex.setText("Dec to Hex");
        btnDecToHex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecToHexActionPerformed(evt);
            }
        });

        lblAnswertext3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAnswertext3.setForeground(new java.awt.Color(255, 0, 0));
        lblAnswertext3.setText("Equivalent Hex Number is :");

        lblErrorMsg2.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrorMsg2.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorMsg2.setText("Error Message");

        lblDecState3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDecState3.setForeground(new java.awt.Color(0, 51, 51));
        lblDecState3.setText("Enter a Hexa-Decimal Number :");

        txtHextoDec.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtHextoDec.setForeground(new java.awt.Color(51, 0, 51));
        txtHextoDec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHextoDecKeyReleased(evt);
            }
        });

        lblAnswertext4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAnswertext4.setForeground(new java.awt.Color(255, 0, 0));
        lblAnswertext4.setText("Equivalent Decimal Number is :");

        lblHexToDecAns.setText(" ");

        lblInstruction.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblInstruction.setForeground(new java.awt.Color(102, 0, 51));
        lblInstruction.setText("Instructions");

        lblInstruction2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction2.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction2.setText("1. User input in the Text fields are validated for every number being typed. Only positive numbers allowed. If not valid, Error Message would be displayed");

        lblInstruction3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction3.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction3.setText("2. For Decimal number input, Max value allowed would be 2147483647, which is the maximum number an Integer can allow");

        lblInstruction4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction4.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction4.setText("3. After providing valid input, User is expected to click the conversion button and Final answer to be displayed in the same row");

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NewBinary_Hex_Conv.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(332, 332, 332)
                .addComponent(lblDecAndHexa, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(188, 188, 188)
                .addComponent(lblImage)
                .addGap(18, 18, 18)
                .addComponent(lblTitle)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDecState2)
                        .addGap(40, 40, 40)
                        .addComponent(txtDectoHex, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnHexToDec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblAnswertext4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDecToHex)
                                .addGap(26, 26, 26)
                                .addComponent(lblAnswertext3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHexToDecAns, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDecToHexAns, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(128, 128, 128))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDecState3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHextoDec, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(lblErrorMsg2, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(357, 357, 357)
                                .addComponent(btnClearAll)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(260, 260, 260)
                                .addComponent(lblDecAndBin, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDecState)
                                    .addComponent(lblBinState))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDectoBin, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBintoDec, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDecToBin)
                                    .addComponent(btnBinToDec))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblAnswertext2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblAnswertext1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBinToDecAns, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDecToBinAns, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblInstruction3, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblInstruction4)
                                    .addComponent(lblInstruction2, javax.swing.GroupLayout.PREFERRED_SIZE, 959, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(lblErrorMsg1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(lblImage)))
                .addGap(38, 38, 38)
                .addComponent(lblInstruction)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInstruction2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInstruction3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInstruction4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(lblDecAndBin)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDecState)
                    .addComponent(txtDectoBin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDecToBin)
                    .addComponent(lblDecToBinAns)
                    .addComponent(lblAnswertext1))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBinState)
                    .addComponent(txtBintoDec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBinToDec)
                    .addComponent(lblBinToDecAns)
                    .addComponent(lblAnswertext2))
                .addGap(38, 38, 38)
                .addComponent(lblErrorMsg1)
                .addGap(103, 103, 103)
                .addComponent(lblDecAndHexa)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDecState2)
                    .addComponent(txtDectoHex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDecToHex)
                    .addComponent(lblAnswertext3)
                    .addComponent(lblDecToHexAns))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHextoDec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDecState3)
                    .addComponent(btnHexToDec)
                    .addComponent(lblAnswertext4)
                    .addComponent(lblHexToDecAns))
                .addGap(48, 48, 48)
                .addComponent(lblErrorMsg2)
                .addGap(35, 35, 35)
                .addComponent(btnClearAll)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Event would be triggered, when user clicks the DectoBin conversion Button
    private void btnDecToBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecToBinActionPerformed

        //Checks for blanks/spaces in the input text field and setting the error message, if validation is successful
        if (Validate_Decimal_Flag == true)
        {
            if (txtDectoBin.getText().trim().isEmpty())
            {
                lblErrorMsg1.setText("No Input provided. Cannot convert to Binary. Try again");
                txtDectoBin.setBackground(Color.RED);
                Validate_Decimal_Flag = false;
            }
        }
        
        //Calling ConvertDecToBin routine to convert the input Decimal value (Only integers allowed) to Binary value, by passing the input Decimal as String
        if (Validate_Decimal_Flag == true)
        {
            UI_DectoBin  = txtDectoBin.getText();
            ConvertDecToBin(UI_DectoBin);  
        }
    }//GEN-LAST:event_btnDecToBinActionPerformed
    
    /*
        ConvertDecToBin

        This method converts the input Decimal value (Only +ve integers allowed) to Binary value, by passing the input Decimal as String

        Parameters  : String

        Returns     : NONE
    */
     public void ConvertDecToBin (String intval)
    {
        //integer variables defined to store quotient and remainder values
        int quotient;
        int remainder;
        
        output_DectoBin = "";
        
        //Initializing the quotient to the integer input value provided by user
        quotient = Integer.parseInt(intval);
        
        //Sets the Binary value to "0", if the user has inputted value of 0
        if (quotient == 0)
        {
            output_DectoBin = "0";
        }
        else
        {
            //performs the Binary conversion using the input decimal value
            while (quotient != 0)
            {
                remainder = quotient % POWERVALUE_2;
                output_DectoBin = String.valueOf(remainder) + output_DectoBin;
                quotient = quotient / POWERVALUE_2;
            }
        }
        lblDecToBinAns.setVisible(true);
        lblAnswertext1.setVisible(true);
        lblDecToBinAns.setText(output_DectoBin);
    }  
    
    //Event would be triggered, when user clicks the BintoDec conversion Button
    private void btnBinToDecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinToDecActionPerformed
        
        //Checks for blanks/spaces in the input text field and setting the error message, if validation is successful
        if (Validate_Binary_Flag == true)
        {
            if (txtBintoDec.getText().trim().isEmpty())
            {
                lblErrorMsg1.setText("No Input provided. Cannot convert to Decimals. Try again");
                txtBintoDec.setBackground(Color.RED);
                Validate_Binary_Flag = false;
            }
        }

        //Calling ConvertBinToDec routine to convert the input Binary value to Decimal value, by passing the input Binary as String
        if (Validate_Binary_Flag == true)
        {
            UI_BintoDec  = txtBintoDec.getText();
            ConvertBinToDec(UI_BintoDec);
        }
    }//GEN-LAST:event_btnBinToDecActionPerformed
    
    /*
        ConvertBinToDec

        This method converts the input Binary value to Decimal value, by passing the input Binary as String

        Parameters  : String

        Returns     : NONE
    */
    public void ConvertBinToDec (String doubleval)
    {
        //integer variables defined to store power of 2
        int power2 =1;
        
        //initializing the output label for BintoDec and Answer labels to Invisible
        output_BintoDec = 0;
        lblBinToDecAns.setVisible(true);
        lblAnswertext2.setVisible(true);
        
        //performs the Decimal conversion using the input binary value
        for (int i=doubleval.length()-1; i>=0; i--)
        {
            //output_BintoDec = output_BintoDec + (Integer.parseInt(String.valueOf((intval.charAt(i)))) * power2);
            output_BintoDec = output_BintoDec + (Double.parseDouble(String.valueOf((doubleval.charAt(i)))) * power2);
            power2 = power2 * POWERVALUE_2; 
        }
        
        lblBinToDecAns.setText(String.format("%.0f",output_BintoDec));
    } 
    
    //Event would be triggered everytime a key is typed & released in the input text field
    private void txtBintoDecKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBintoDecKeyReleased
        
        //variables declared to store the input decimal values
        String InputBinary;
        double Validate_Int;
        
        //initializing the Validate_Binary_Flag and Answer labels to Invisible
        Validate_Binary_Flag = true;
        lblBinToDecAns.setVisible(false);
        lblAnswertext2.setVisible(false);
        
        InputBinary = txtBintoDec.getText();
        
        //checks for input value to be blanks or spaces
        if (InputBinary.trim().isEmpty())
        {
                Validate_Binary_Flag = true;
                txtBintoDec.setBackground(Color.WHITE);
                lblErrorMsg1.setText("");
            }
        else
        {
            //Uses try and catch to validate the data for INTEGER
            try
                {
                    Validate_Int = Double.parseDouble(InputBinary);
                    Validate_Binary_Flag = true;
                    txtBintoDec.setBackground(Color.WHITE);
                    lblErrorMsg1.setText("");
                }

                catch (NumberFormatException e)
                {
                    lblErrorMsg1.setText("BAD INPUT. Either Non-Binary values or negative values typed. Try again");
                    txtBintoDec.setBackground(Color.RED);
                    Validate_Binary_Flag = false;
                }  
            
            //checks for Binary values of 0 or 1 and if anyother values found, will display error message
            if (Validate_Binary_Flag == true)
            {
               for (int i=0;i<InputBinary.length();i++)
                {
                    if ((InputBinary.charAt(i) != '0') && (InputBinary.charAt(i) != '1'))
                    {
                        lblErrorMsg1.setText("BAD INPUT. Only Binary values allowed. Try again");
                        txtBintoDec.setBackground(Color.RED);
                        Validate_Binary_Flag = false;
                    }
                } 
            }
        }
  
    }//GEN-LAST:event_txtBintoDecKeyReleased
    
    //Event would be triggered everytime a key is typed & released in the input text field
    private void txtDectoBinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDectoBinKeyReleased
        
        //variables declared to store the input decimal values
        String InputDecimal;
        int Validate_Integer;
        
        //initializing the Validate_Decimal_Flag and Answer labels to Invisible
        Validate_Decimal_Flag = true;
        lblDecToBinAns.setVisible(false);
        lblAnswertext1.setVisible(false);
        
        InputDecimal = txtDectoBin.getText();
        
        //checks for input value to be blanks or spaces
        if (InputDecimal.trim().isEmpty())
        {
            Validate_Decimal_Flag = true;
            txtDectoBin.setBackground(Color.WHITE);
            lblErrorMsg1.setText("");
        }
        else
        {
            //Uses try and catch to validate the data for INTEGER
            try
            {
                Validate_Integer = Integer.parseInt(InputDecimal);
                Validate_Decimal_Flag = true;
                txtDectoBin.setBackground(Color.WHITE);
                lblErrorMsg1.setText("");
            }

            catch (NumberFormatException e)
            {
                lblErrorMsg1.setText("BAD INPUT. Either Non-Integers or -ve values typed or value exceeds the limit of 2147483647. Try again");
                txtDectoBin.setBackground(Color.RED);
                Validate_Decimal_Flag = false;
            }
        }
    }//GEN-LAST:event_txtDectoBinKeyReleased
    
    //Event would be triggered, when user clicks the CLEAR ALL button
    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        
        //Calling ProgInit routine to reinitialize all Text input fields and labels
        ProgInit();
    }//GEN-LAST:event_btnClearAllActionPerformed
    
    //Event would be triggered everytime a key is typed & released in the input text field
    private void txtDectoHexKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDectoHexKeyReleased
        
        //variables declared to store the input decimal values
        String InputDecimal;
        int Validate_Integer;
        
        //initializing the Validate_DectoHex_Flag and Answer labels to Invisible
        Validate_DectoHex_Flag = true;
        lblDecToHexAns.setVisible(false);
        lblAnswertext3.setVisible(false);
        
        InputDecimal = txtDectoHex.getText();
        
        //checks for input value to be blanks or spaces
        if (InputDecimal.trim().isEmpty())
        {
                Validate_DectoHex_Flag = true;
                txtDectoHex.setBackground(Color.WHITE);
                lblErrorMsg2.setText("");
            }
        else
        {
            //Uses try and catch to validate the data for INTEGER
            try
                {
                    Validate_Integer = Integer.parseInt(InputDecimal);
                    Validate_DectoHex_Flag = true;
                    txtDectoHex.setBackground(Color.WHITE);
                    lblErrorMsg2.setText("");
                }

                catch (NumberFormatException e)
                {
                    lblErrorMsg2.setText("BAD INPUT. Either Non-Integers typed or value exceeds the limit of 2147483647. Try again");
                    txtDectoHex.setBackground(Color.RED);
                    Validate_DectoHex_Flag = false;
                }
        }
    }//GEN-LAST:event_txtDectoHexKeyReleased
    
    //Event would be triggered, when user clicks the DectoHex conversion Button
    private void btnDecToHexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecToHexActionPerformed

        //Checks for blanks/spaces in the input text field and setting the error message, if validation is successful
        if (Validate_DectoHex_Flag == true)
        {
            if (txtDectoHex.getText().trim().isEmpty())
            {
                lblErrorMsg2.setText("No Input provided. Cannot convert to Hexadecimal. Try again");
                txtDectoHex.setBackground(Color.RED);
                Validate_DectoHex_Flag = false;
            }
        }
        
        //Calling ConvertDecToHex routine to convert the input Decimal value to Hexa-Decimal value, by passing the input Decimal as String
        if (Validate_DectoHex_Flag == true)
        {
            UI_DectoHex  = txtDectoHex.getText();
            ConvertDecToHex(UI_DectoHex);  
        }
        
    }//GEN-LAST:event_btnDecToHexActionPerformed
    
    /*
        ConvertDecToHex

        This method converts the input Decimal value to Hexa-Decimal value, by passing the input Decimal as String

        Parameters  : String

        Returns     : NONE
    */
    public void ConvertDecToHex (String intvalue)
    {
        //character array defined to translate Hexa characters for values between 0 and 15
        char hexchars[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
        
        //integer variables defined to store quotient and remainder values
        int quotient;
        int remainder = 0;
        
        output_DectoHex ="";
        
        //Initializing the quotient to the integer input value provided by user
        quotient = Integer.parseInt(intvalue);
        
        //Sets the Binary value to "0", if the user has inputted value of 0
        if (quotient == 0)
        {
            output_DectoHex = "0";
        }
        else
        {
            //performs the Hexa-Decimal conversion using the input decimal value
            while (quotient > 0)
            {
                remainder = quotient % POWERVALUE_16;
                output_DectoHex = hexchars[remainder] + output_DectoHex;
                quotient = quotient / POWERVALUE_16;
            }
        }
        lblDecToHexAns.setVisible(true);
        lblAnswertext3.setVisible(true);
        lblDecToHexAns.setText(output_DectoHex);
        
    } 
    
    //Event would be triggered everytime a key is typed & released in the input text field
    private void txtHextoDecKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHextoDecKeyReleased
        
        //variables declared to store the input decimal values
        String InputHex="";
        String tempchar="";
        
        //initializing the Validate_Binary_Flag and Answer labels to Invisible
        Validate_HextoDec_Flag = true;
        lblHexToDecAns.setVisible(false);
        lblAnswertext4.setVisible(false);
        
        InputHex = txtHextoDec.getText();
        
        //checks for input value to be blanks or spaces
        if (InputHex.trim().isEmpty())
        {
                Validate_HextoDec_Flag = true;
                txtHextoDec.setBackground(Color.WHITE);
                lblErrorMsg2.setText("");
            }
        else
        {
            //checks for Hexa decimal valid values and if any other values found, will display error message
            if (Validate_HextoDec_Flag == true)
            {
               for (int i=0;i<InputHex.length();i++)
                {
                    tempchar = String.valueOf(InputHex.charAt(i)).toUpperCase();
                    if (!(tempchar.matches("0|1|2|3|4|5|6|7|8|9|A|B|C|D|E|F")))
                    {
                        lblErrorMsg2.setText("BAD INPUT. Only Positive Hexa-Decimal values allowed. Try again");
                        txtHextoDec.setBackground(Color.RED);
                        Validate_HextoDec_Flag = false;
                        i=InputHex.length()-1;
                    }
                    else
                    {
                        Validate_HextoDec_Flag = true;
                        txtHextoDec.setBackground(Color.WHITE);
                        lblErrorMsg2.setText("");
                    }
                } 
            }
        }
        
    }//GEN-LAST:event_txtHextoDecKeyReleased
    
    //Event would be triggered, when user clicks the HextoDec conversion Button
    private void btnHexToDecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHexToDecActionPerformed
     
        //Checks for blanks/spaces in the input text field and setting the error message, if validation is successful
        if (Validate_HextoDec_Flag == true)
        {
            if (txtHextoDec.getText().trim().isEmpty())
            {
                lblErrorMsg2.setText("No Input provided. Cannot convert to Decimals. Try again");
                txtHextoDec.setBackground(Color.RED);
                Validate_HextoDec_Flag = false;
            }
        }

        //Calling ConvertDecToHex routine to convert the input Hexa-Decimal value to Decimal value, by passing the input Hexa-Decimal as String
        if (Validate_HextoDec_Flag == true)
        {
            UI_HextoDec  = txtHextoDec.getText().toUpperCase();
            ConvertHextoDec(UI_HextoDec);
        }
    }//GEN-LAST:event_btnHexToDecActionPerformed
    
    /*
        ConvertHextoDec

        This method converts the input Decimal value to Hexa-Decimal value, by passing the input Decimal as String

        Parameters  : String

        Returns     : NONE
    */
    public void ConvertHextoDec (String doublevalue)
    {
        //character array defined to translate Hexa characters for values between 0 and 15
        char hexchars[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
        double power16 =1;
        
        //initializing the output label for HextoDec and Answer labels to Invisible
        output_HextoDec = 0;
        lblHexToDecAns.setVisible(true);
        lblAnswertext4.setVisible(true);
        
        //performs the Decimal conversion using the input Hexa-Decimal value
        for (int i=doublevalue.length()-1; i>=0; i--)
        {
            for (int j=0;j<hexchars.length;j++)
            {
                if ((doublevalue.charAt(i)) == hexchars[j])
                {
                    output_HextoDec = output_HextoDec + (double)(j * power16);
                    j = hexchars.length-1;
                }
            }
            
            //output_HextoDec = output_HextoDec + (Integer.parseInt(String.valueOf((doublevalue.charAt(i)))) * power16);
            power16 = power16 * POWERVALUE_16; 
        }
        //not working for Hexa - 123456789
            
        lblHexToDecAns.setText(String.format("%.0f",output_HextoDec));
        
    }  
    
     
    /*
        ProgInit

        This method allows the User to initialize all the input Text field, Output value fields and Error message fields

        Parameters  : NONE

        Returns     : NONE
    */
    public void ProgInit() {                                               
        
        //Setting blanks to Input Text field and Error/Result labels
        txtDectoBin.setText("");
        txtBintoDec.setText("");
        txtDectoHex.setText("");
        txtHextoDec.setText("");
        lblDecToBinAns.setText("");
        lblBinToDecAns.setText("");
        lblDecToHexAns.setText("");
        lblHexToDecAns.setText("");
        lblErrorMsg1.setText("");
        lblErrorMsg2.setText("");
        
        //Setting all the Answer label fields to INVISIBLE
        lblDecToBinAns.setVisible(false);
        lblBinToDecAns.setVisible(false);
        lblDecToHexAns.setVisible(false);
        lblHexToDecAns.setVisible(false);
        lblAnswertext1.setVisible(false);
        lblAnswertext2.setVisible(false);
        lblAnswertext3.setVisible(false);
        lblAnswertext4.setVisible(false);
        
        //Setting the background to WHITE for all text fields
        txtDectoBin.setBackground(Color.WHITE);
        txtBintoDec.setBackground(Color.WHITE);
        txtDectoHex.setBackground(Color.WHITE);
        txtHextoDec.setBackground(Color.WHITE);
        
        //Setting backgound colors to Buttons
        btnDecToBin.setBackground(Color.cyan);
        btnBinToDec.setBackground(Color.cyan);
        btnDecToHex.setBackground(Color.cyan);
        btnHexToDec.setBackground(Color.cyan);
        
        btnClearAll.setBackground(Color.YELLOW);
        
        //Initializing all Flag values to True
        Validate_Decimal_Flag = true;
        Validate_Binary_Flag = true;
        Validate_DectoHex_Flag = true;
        Validate_HextoDec_Flag = true;
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmBinandHexConv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmBinandHexConv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmBinandHexConv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmBinandHexConv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmBinandHexConv().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBinToDec;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnDecToBin;
    private javax.swing.JButton btnDecToHex;
    private javax.swing.JButton btnHexToDec;
    private javax.swing.JLabel lblAnswertext1;
    private javax.swing.JLabel lblAnswertext2;
    private javax.swing.JLabel lblAnswertext3;
    private javax.swing.JLabel lblAnswertext4;
    private javax.swing.JLabel lblBinState;
    private javax.swing.JLabel lblBinToDecAns;
    private javax.swing.JLabel lblDecAndBin;
    private javax.swing.JLabel lblDecAndHexa;
    private javax.swing.JLabel lblDecState;
    private javax.swing.JLabel lblDecState2;
    private javax.swing.JLabel lblDecState3;
    private javax.swing.JLabel lblDecToBinAns;
    private javax.swing.JLabel lblDecToHexAns;
    private javax.swing.JLabel lblErrorMsg1;
    private javax.swing.JLabel lblErrorMsg2;
    private javax.swing.JLabel lblHexToDecAns;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblInstruction;
    private javax.swing.JLabel lblInstruction2;
    private javax.swing.JLabel lblInstruction3;
    private javax.swing.JLabel lblInstruction4;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtBintoDec;
    private javax.swing.JTextField txtDectoBin;
    private javax.swing.JTextField txtDectoHex;
    private javax.swing.JTextField txtHextoDec;
    // End of variables declaration//GEN-END:variables
}
